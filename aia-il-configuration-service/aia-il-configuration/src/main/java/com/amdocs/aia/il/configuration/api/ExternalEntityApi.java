/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.amdocs.aia.il.configuration.api;

import com.amdocs.aia.il.configuration.dto.ExternalEntityDTO;
import java.util.List;
import com.amdocs.aia.il.configuration.dto.SaveElementsResponseDTO;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;

@Validated
@Api(value = "ExternalEntity", description = "the ExternalEntity API")
@RequestMapping(value = "/aia/api/v1/integration-layer")
public interface ExternalEntityApi {

    Logger log = LoggerFactory.getLogger(ExternalEntityApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Add new External Entities", nickname = "addExternalEntities", notes = "", response = SaveElementsResponseDTO.class, tags={ "External Entity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "OK External Entity created", response = SaveElementsResponseDTO.class),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/projects/{projectKey}/configuration/external-schemas/entities-bulk",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<SaveElementsResponseDTO> addExternalEntities(@ApiParam(value = "The project key",required=true) @PathVariable("projectKey") String projectKey,@ApiParam(value = "New External Entities" ,required=true )  @Valid @RequestBody List<ExternalEntityDTO> externalEntities) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"savedElementsCount\" : 0}", SaveElementsResponseDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ExternalEntityApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Add a new External Entity", nickname = "addExternalEntity", notes = "", response = ExternalEntityDTO.class, tags={ "External Entity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "OK External Entity created", response = ExternalEntityDTO.class),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/projects/{projectKey}/configuration/external-schemas/{externalSchemaKey}/entities",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ExternalEntityDTO> addExternalEntity(@ApiParam(value = "The project key",required=true) @PathVariable("projectKey") String projectKey,@ApiParam(value = "External Schema Key",required=true) @PathVariable("externalSchemaKey") String externalSchemaKey,@ApiParam(value = "The new External Entity" ,required=true )  @Valid @RequestBody ExternalEntityDTO externalEntity) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"isTransaction\" : true,  \"collectionRules\" : {    \"storeType\" : \"CSV\",    \"defaultFilter\" : {      \"filterKey\" : \"filterKey\",      \"filterLogic\" : \"filterLogic\"    },    \"incrementalAttribute\" : {      \"type\" : \"SEQUENCE\",      \"key\" : \"key\"    },    \"filters\" : [ {      \"filterKey\" : \"filterKey\",      \"filterLogic\" : \"filterLogic\"    }, {      \"filterKey\" : \"filterKey\",      \"filterLogic\" : \"filterLogic\"    } ]  },  \"entityKey\" : \"entityKey\",  \"description\" : \"description\",  \"isActive\" : true,  \"createdAt\" : 5,  \"originProcess\" : \"originProcess\",  \"createdBy\" : \"createdBy\",  \"entityName\" : \"entityName\",  \"attributes\" : [ {    \"isRequired\" : true,    \"defaultValue\" : \"defaultValue\",    \"isUpdateTime\" : true,    \"description\" : \"description\",    \"attributeKey\" : \"attributeKey\",    \"logicalDatatype\" : \"logicalDatatype\",    \"datatype\" : \"datatype\",    \"isLogicalTime\" : true,    \"attributeName\" : \"attributeName\",    \"storeInfo\" : {      \"storeType\" : \"CSV\"    },    \"keyPosition\" : 1,    \"validationRegex\" : \"validationRegex\",    \"serializationId\" : 6  }, {    \"isRequired\" : true,    \"defaultValue\" : \"defaultValue\",    \"isUpdateTime\" : true,    \"description\" : \"description\",    \"attributeKey\" : \"attributeKey\",    \"logicalDatatype\" : \"logicalDatatype\",    \"datatype\" : \"datatype\",    \"isLogicalTime\" : true,    \"attributeName\" : \"attributeName\",    \"storeInfo\" : {      \"storeType\" : \"CSV\"    },    \"keyPosition\" : 1,    \"validationRegex\" : \"validationRegex\",    \"serializationId\" : 6  } ],  \"storeInfo\" : {    \"storeType\" : \"CSV\"  },  \"isTransient\" : true,  \"serializationId\" : 0,  \"schemaKey\" : \"schemaKey\",  \"status\" : { }}", ExternalEntityDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ExternalEntityApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "delete an External Entity", nickname = "deleteExternalEntityByKey", notes = "", tags={ "External Entity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The External Entity was removed from the configuration. Note that 204 is returned even if the External Entity was not found and there was no need to delete anything."),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Project or target not found") })
    @RequestMapping(value = "/projects/{projectKey}/configuration/external-schemas/{externalSchemaKey}/entities/{externalEntityKey}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteExternalEntityByKey(@ApiParam(value = "The project key",required=true) @PathVariable("projectKey") String projectKey,@ApiParam(value = "External Schema Key",required=true) @PathVariable("externalSchemaKey") String externalSchemaKey,@ApiParam(value = "External Entity Key",required=true) @PathVariable("externalEntityKey") String externalEntityKey) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ExternalEntityApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get all external entities", nickname = "getExternalEntities", notes = "", response = ExternalEntityDTO.class, responseContainer = "List", tags={ "External Entity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "External entities retrieved", response = ExternalEntityDTO.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid project key supplied"),
        @ApiResponse(code = 404, message = "Project not found") })
    @RequestMapping(value = "/projects/{projectKey}/configuration/external-schemas/{externalSchemaKey}/entities",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ExternalEntityDTO>> getExternalEntities(@ApiParam(value = "The project key",required=true) @PathVariable("projectKey") String projectKey,@ApiParam(value = "External Schema Key",required=true) @PathVariable("externalSchemaKey") String externalSchemaKey) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {  \"isTransaction\" : true,  \"collectionRules\" : {    \"storeType\" : \"CSV\",    \"defaultFilter\" : {      \"filterKey\" : \"filterKey\",      \"filterLogic\" : \"filterLogic\"    },    \"incrementalAttribute\" : {      \"type\" : \"SEQUENCE\",      \"key\" : \"key\"    },    \"filters\" : [ {      \"filterKey\" : \"filterKey\",      \"filterLogic\" : \"filterLogic\"    }, {      \"filterKey\" : \"filterKey\",      \"filterLogic\" : \"filterLogic\"    } ]  },  \"entityKey\" : \"entityKey\",  \"description\" : \"description\",  \"isActive\" : true,  \"createdAt\" : 5,  \"originProcess\" : \"originProcess\",  \"createdBy\" : \"createdBy\",  \"entityName\" : \"entityName\",  \"attributes\" : [ {    \"isRequired\" : true,    \"defaultValue\" : \"defaultValue\",    \"isUpdateTime\" : true,    \"description\" : \"description\",    \"attributeKey\" : \"attributeKey\",    \"logicalDatatype\" : \"logicalDatatype\",    \"datatype\" : \"datatype\",    \"isLogicalTime\" : true,    \"attributeName\" : \"attributeName\",    \"storeInfo\" : {      \"storeType\" : \"CSV\"    },    \"keyPosition\" : 1,    \"validationRegex\" : \"validationRegex\",    \"serializationId\" : 6  }, {    \"isRequired\" : true,    \"defaultValue\" : \"defaultValue\",    \"isUpdateTime\" : true,    \"description\" : \"description\",    \"attributeKey\" : \"attributeKey\",    \"logicalDatatype\" : \"logicalDatatype\",    \"datatype\" : \"datatype\",    \"isLogicalTime\" : true,    \"attributeName\" : \"attributeName\",    \"storeInfo\" : {      \"storeType\" : \"CSV\"    },    \"keyPosition\" : 1,    \"validationRegex\" : \"validationRegex\",    \"serializationId\" : 6  } ],  \"storeInfo\" : {    \"storeType\" : \"CSV\"  },  \"isTransient\" : true,  \"serializationId\" : 0,  \"schemaKey\" : \"schemaKey\",  \"status\" : { }}, {  \"isTransaction\" : true,  \"collectionRules\" : {    \"storeType\" : \"CSV\",    \"defaultFilter\" : {      \"filterKey\" : \"filterKey\",      \"filterLogic\" : \"filterLogic\"    },    \"incrementalAttribute\" : {      \"type\" : \"SEQUENCE\",      \"key\" : \"key\"    },    \"filters\" : [ {      \"filterKey\" : \"filterKey\",      \"filterLogic\" : \"filterLogic\"    }, {      \"filterKey\" : \"filterKey\",      \"filterLogic\" : \"filterLogic\"    } ]  },  \"entityKey\" : \"entityKey\",  \"description\" : \"description\",  \"isActive\" : true,  \"createdAt\" : 5,  \"originProcess\" : \"originProcess\",  \"createdBy\" : \"createdBy\",  \"entityName\" : \"entityName\",  \"attributes\" : [ {    \"isRequired\" : true,    \"defaultValue\" : \"defaultValue\",    \"isUpdateTime\" : true,    \"description\" : \"description\",    \"attributeKey\" : \"attributeKey\",    \"logicalDatatype\" : \"logicalDatatype\",    \"datatype\" : \"datatype\",    \"isLogicalTime\" : true,    \"attributeName\" : \"attributeName\",    \"storeInfo\" : {      \"storeType\" : \"CSV\"    },    \"keyPosition\" : 1,    \"validationRegex\" : \"validationRegex\",    \"serializationId\" : 6  }, {    \"isRequired\" : true,    \"defaultValue\" : \"defaultValue\",    \"isUpdateTime\" : true,    \"description\" : \"description\",    \"attributeKey\" : \"attributeKey\",    \"logicalDatatype\" : \"logicalDatatype\",    \"datatype\" : \"datatype\",    \"isLogicalTime\" : true,    \"attributeName\" : \"attributeName\",    \"storeInfo\" : {      \"storeType\" : \"CSV\"    },    \"keyPosition\" : 1,    \"validationRegex\" : \"validationRegex\",    \"serializationId\" : 6  } ],  \"storeInfo\" : {    \"storeType\" : \"CSV\"  },  \"isTransient\" : true,  \"serializationId\" : 0,  \"schemaKey\" : \"schemaKey\",  \"status\" : { }} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ExternalEntityApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get an External Entity", nickname = "getExternalEntityByKey", notes = "", response = ExternalEntityDTO.class, tags={ "External Entity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "External Entity retrieved", response = ExternalEntityDTO.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "External Entity not found") })
    @RequestMapping(value = "/projects/{projectKey}/configuration/external-schemas/{externalSchemaKey}/entities/{externalEntityKey}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ExternalEntityDTO> getExternalEntityByKey(@ApiParam(value = "The project key",required=true) @PathVariable("projectKey") String projectKey,@ApiParam(value = "External Schema Key",required=true) @PathVariable("externalSchemaKey") String externalSchemaKey,@ApiParam(value = "External Entity Key",required=true) @PathVariable("externalEntityKey") String externalEntityKey) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"isTransaction\" : true,  \"collectionRules\" : {    \"storeType\" : \"CSV\",    \"defaultFilter\" : {      \"filterKey\" : \"filterKey\",      \"filterLogic\" : \"filterLogic\"    },    \"incrementalAttribute\" : {      \"type\" : \"SEQUENCE\",      \"key\" : \"key\"    },    \"filters\" : [ {      \"filterKey\" : \"filterKey\",      \"filterLogic\" : \"filterLogic\"    }, {      \"filterKey\" : \"filterKey\",      \"filterLogic\" : \"filterLogic\"    } ]  },  \"entityKey\" : \"entityKey\",  \"description\" : \"description\",  \"isActive\" : true,  \"createdAt\" : 5,  \"originProcess\" : \"originProcess\",  \"createdBy\" : \"createdBy\",  \"entityName\" : \"entityName\",  \"attributes\" : [ {    \"isRequired\" : true,    \"defaultValue\" : \"defaultValue\",    \"isUpdateTime\" : true,    \"description\" : \"description\",    \"attributeKey\" : \"attributeKey\",    \"logicalDatatype\" : \"logicalDatatype\",    \"datatype\" : \"datatype\",    \"isLogicalTime\" : true,    \"attributeName\" : \"attributeName\",    \"storeInfo\" : {      \"storeType\" : \"CSV\"    },    \"keyPosition\" : 1,    \"validationRegex\" : \"validationRegex\",    \"serializationId\" : 6  }, {    \"isRequired\" : true,    \"defaultValue\" : \"defaultValue\",    \"isUpdateTime\" : true,    \"description\" : \"description\",    \"attributeKey\" : \"attributeKey\",    \"logicalDatatype\" : \"logicalDatatype\",    \"datatype\" : \"datatype\",    \"isLogicalTime\" : true,    \"attributeName\" : \"attributeName\",    \"storeInfo\" : {      \"storeType\" : \"CSV\"    },    \"keyPosition\" : 1,    \"validationRegex\" : \"validationRegex\",    \"serializationId\" : 6  } ],  \"storeInfo\" : {    \"storeType\" : \"CSV\"  },  \"isTransient\" : true,  \"serializationId\" : 0,  \"schemaKey\" : \"schemaKey\",  \"status\" : { }}", ExternalEntityDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ExternalEntityApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Update External Entity", nickname = "updateExternalEntity", notes = "", response = ExternalEntityDTO.class, tags={ "External Entity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "OK External Entity updated", response = ExternalEntityDTO.class),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/projects/{projectKey}/configuration/external-schemas/{externalSchemaKey}/entities/{externalEntityKey}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<ExternalEntityDTO> updateExternalEntity(@ApiParam(value = "The project key",required=true) @PathVariable("projectKey") String projectKey,@ApiParam(value = "External Schema Key",required=true) @PathVariable("externalSchemaKey") String externalSchemaKey,@ApiParam(value = "External Entity Key",required=true) @PathVariable("externalEntityKey") String externalEntityKey,@ApiParam(value = "The updated External Entity" ,required=true )  @Valid @RequestBody ExternalEntityDTO externalEntity) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"isTransaction\" : true,  \"collectionRules\" : {    \"storeType\" : \"CSV\",    \"defaultFilter\" : {      \"filterKey\" : \"filterKey\",      \"filterLogic\" : \"filterLogic\"    },    \"incrementalAttribute\" : {      \"type\" : \"SEQUENCE\",      \"key\" : \"key\"    },    \"filters\" : [ {      \"filterKey\" : \"filterKey\",      \"filterLogic\" : \"filterLogic\"    }, {      \"filterKey\" : \"filterKey\",      \"filterLogic\" : \"filterLogic\"    } ]  },  \"entityKey\" : \"entityKey\",  \"description\" : \"description\",  \"isActive\" : true,  \"createdAt\" : 5,  \"originProcess\" : \"originProcess\",  \"createdBy\" : \"createdBy\",  \"entityName\" : \"entityName\",  \"attributes\" : [ {    \"isRequired\" : true,    \"defaultValue\" : \"defaultValue\",    \"isUpdateTime\" : true,    \"description\" : \"description\",    \"attributeKey\" : \"attributeKey\",    \"logicalDatatype\" : \"logicalDatatype\",    \"datatype\" : \"datatype\",    \"isLogicalTime\" : true,    \"attributeName\" : \"attributeName\",    \"storeInfo\" : {      \"storeType\" : \"CSV\"    },    \"keyPosition\" : 1,    \"validationRegex\" : \"validationRegex\",    \"serializationId\" : 6  }, {    \"isRequired\" : true,    \"defaultValue\" : \"defaultValue\",    \"isUpdateTime\" : true,    \"description\" : \"description\",    \"attributeKey\" : \"attributeKey\",    \"logicalDatatype\" : \"logicalDatatype\",    \"datatype\" : \"datatype\",    \"isLogicalTime\" : true,    \"attributeName\" : \"attributeName\",    \"storeInfo\" : {      \"storeType\" : \"CSV\"    },    \"keyPosition\" : 1,    \"validationRegex\" : \"validationRegex\",    \"serializationId\" : 6  } ],  \"storeInfo\" : {    \"storeType\" : \"CSV\"  },  \"isTransient\" : true,  \"serializationId\" : 0,  \"schemaKey\" : \"schemaKey\",  \"status\" : { }}", ExternalEntityDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ExternalEntityApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
