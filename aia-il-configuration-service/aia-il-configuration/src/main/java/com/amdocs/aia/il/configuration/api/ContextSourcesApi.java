/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.amdocs.aia.il.configuration.api;

import com.amdocs.aia.il.configuration.dto.BaseEntityDTO;
import com.amdocs.aia.il.configuration.dto.ContextSourceDTO;
import com.amdocs.aia.il.configuration.dto.EntitiesDTO;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;

@Validated
@Api(value = "ContextSources", description = "the ContextSources API")
@RequestMapping(value = "/aia/api/v1/integration-layer")
public interface ContextSourcesApi {

    Logger log = LoggerFactory.getLogger(ContextSourcesApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Get all context sources", nickname = "getContextSources", notes = "", response = ContextSourceDTO.class, responseContainer = "List", tags={ "Context Sources", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Context Sources retrieved", response = ContextSourceDTO.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid project key supplied"),
        @ApiResponse(code = 404, message = "Project not found") })
    @RequestMapping(value = "/projects/{projectKey}/configuration/context-sources/shared",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ContextSourceDTO>> getContextSources(@ApiParam(value = "The project key",required=true) @PathVariable("projectKey") String projectKey,@ApiParam(value = "Schema type") @Valid @RequestParam(value = "schemaType", required = false) String schemaType) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {  \"contextSourceEntities\" : [ {    \"entityName\" : \"entityName\",    \"entityKey\" : \"entityKey\"  }, {    \"entityName\" : \"entityName\",    \"entityKey\" : \"entityKey\"  } ],  \"schemaType\" : \"CACHE\",  \"schemaName\" : \"schemaName\",  \"schemaKey\" : \"schemaKey\"}, {  \"contextSourceEntities\" : [ {    \"entityName\" : \"entityName\",    \"entityKey\" : \"entityKey\"  }, {    \"entityName\" : \"entityName\",    \"entityKey\" : \"entityKey\"  } ],  \"schemaType\" : \"CACHE\",  \"schemaName\" : \"schemaName\",  \"schemaKey\" : \"schemaKey\"} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ContextSourcesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Find context entities metadata", nickname = "searchContextEntitiesMetadata", notes = "", response = BaseEntityDTO.class, responseContainer = "List", tags={ "Context Sources", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Context Entities Metadata retrieved", response = BaseEntityDTO.class, responseContainer = "List"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/projects/{projectKey}/configuration/context-sources/context-entities-metadata",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<BaseEntityDTO>> searchContextEntitiesMetadata(@ApiParam(value = "The project key",required=true) @PathVariable("projectKey") String projectKey,@ApiParam(value = "context entities ref" ,required=true )  @Valid @RequestBody EntitiesDTO entities) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {  \"entityName\" : \"entityName\",  \"entityKey\" : \"entityKey\",  \"attributes\" : [ {    \"datatype\" : \"datatype\",    \"attributeName\" : \"attributeName\",    \"attributeKey\" : \"attributeKey\",    \"keyPosition\" : 0  }, {    \"datatype\" : \"datatype\",    \"attributeName\" : \"attributeName\",    \"attributeKey\" : \"attributeKey\",    \"keyPosition\" : 0  } ],  \"schemaKey\" : \"schemaKey\"}, {  \"entityName\" : \"entityName\",  \"entityKey\" : \"entityKey\",  \"attributes\" : [ {    \"datatype\" : \"datatype\",    \"attributeName\" : \"attributeName\",    \"attributeKey\" : \"attributeKey\",    \"keyPosition\" : 0  }, {    \"datatype\" : \"datatype\",    \"attributeName\" : \"attributeName\",    \"attributeKey\" : \"attributeKey\",    \"keyPosition\" : 0  } ],  \"schemaKey\" : \"schemaKey\"} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ContextSourcesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
