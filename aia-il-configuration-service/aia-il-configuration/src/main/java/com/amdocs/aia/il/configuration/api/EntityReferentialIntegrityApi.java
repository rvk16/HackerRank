/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.amdocs.aia.il.configuration.api;

import com.amdocs.aia.il.configuration.dto.EntityReferentialIntegrityDTO;
import java.util.List;
import com.amdocs.aia.il.configuration.dto.SaveElementsResponseDTO;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;

@Validated
@Api(value = "EntityReferentialIntegrity", description = "the EntityReferentialIntegrity API")
@RequestMapping(value = "/aia/api/v1/integration-layer")
public interface EntityReferentialIntegrityApi {

    Logger log = LoggerFactory.getLogger(EntityReferentialIntegrityApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Add new Entities Referential Integrity", nickname = "addEntitiesReferentialIntegrity", notes = "", response = SaveElementsResponseDTO.class, tags={ "Entity Referential Integrity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "OK EntitiesReferentialIntegrity created", response = SaveElementsResponseDTO.class),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/projects/{projectKey}/configuration/referential-integrity-bulk",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<SaveElementsResponseDTO> addEntitiesReferentialIntegrity(@ApiParam(value = "The project key",required=true) @PathVariable("projectKey") String projectKey,@ApiParam(value = "The new EntitiesReferentialIntegrity" ,required=true )  @Valid @RequestBody List<EntityReferentialIntegrityDTO> entitiesReferentialIntegrity) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"savedElementsCount\" : 0}", SaveElementsResponseDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default EntityReferentialIntegrityApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Add a new Entity Referential Integrity", nickname = "addEntityReferentialIntegrity", notes = "", response = EntityReferentialIntegrityDTO.class, tags={ "Entity Referential Integrity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "OK EntityReferentialIntegrity created", response = EntityReferentialIntegrityDTO.class),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/projects/{projectKey}/configuration/referential-integrity",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<EntityReferentialIntegrityDTO> addEntityReferentialIntegrity(@ApiParam(value = "The project key",required=true) @PathVariable("projectKey") String projectKey,@ApiParam(value = "The new EntityReferentialIntegrity" ,required=true )  @Valid @RequestBody EntityReferentialIntegrityDTO entityReferentialIntegrity) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"schemaStoreKey\" : \"schemaStoreKey\",  \"entityStoreKey\" : \"entityStoreKey\",  \"relations\" : [ {    \"parentSchemaKey\" : \"parentSchemaKey\",    \"parentEntityKey\" : \"parentEntityKey\",    \"parentAttributeKey\" : \"parentAttributeKey\",    \"attributeKey\" : \"attributeKey\"  }, {    \"parentSchemaKey\" : \"parentSchemaKey\",    \"parentEntityKey\" : \"parentEntityKey\",    \"parentAttributeKey\" : \"parentAttributeKey\",    \"attributeKey\" : \"attributeKey\"  } ]}", EntityReferentialIntegrityDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default EntityReferentialIntegrityApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
