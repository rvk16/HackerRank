/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.amdocs.aia.il.configuration.api;

import com.amdocs.aia.il.configuration.dto.CacheReferenceEntityDTO;
import java.util.List;
import com.amdocs.aia.il.configuration.dto.SaveElementsResponseDTO;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;

@Validated
@Api(value = "CacheReference", description = "the CacheReference API")
@RequestMapping(value = "/aia/api/v1/integration-layer")
public interface CacheReferenceApi {

    Logger log = LoggerFactory.getLogger(CacheReferenceApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Add  new Cache Reference Entities", nickname = "addCacheReferenceEntities", notes = "", response = SaveElementsResponseDTO.class, tags={ "Cache Reference", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "OK Cache Reference Entities created", response = SaveElementsResponseDTO.class),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/projects/{projectKey}/configuration/cache-reference-bulk",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<SaveElementsResponseDTO> addCacheReferenceEntities(@ApiParam(value = "The project key",required=true) @PathVariable("projectKey") String projectKey,@ApiParam(value = "The new Cache Reference Entity" ,required=true )  @Valid @RequestBody List<CacheReferenceEntityDTO> cacheReferenceEntities) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"savedElementsCount\" : 0}", SaveElementsResponseDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CacheReferenceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Add a new Cache Reference Entity", nickname = "addCacheReferenceEntity", notes = "", response = CacheReferenceEntityDTO.class, tags={ "Cache Reference", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "OK Cache Reference Entity created", response = CacheReferenceEntityDTO.class),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/projects/{projectKey}/configuration/cache-reference",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CacheReferenceEntityDTO> addCacheReferenceEntity(@ApiParam(value = "The project key",required=true) @PathVariable("projectKey") String projectKey,@ApiParam(value = "The new Cache Reference Entity" ,required=true )  @Valid @RequestBody CacheReferenceEntityDTO cacheReferenceEntity) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"createdAt\" : 6,  \"originProcess\" : \"originProcess\",  \"cacheReferenceAttributes\" : [ {    \"description\" : \"description\",    \"attributeName\" : \"attributeName\",    \"attributeKey\" : \"attributeKey\",    \"type\" : \"type\",    \"keyPosition\" : 0  }, {    \"description\" : \"description\",    \"attributeName\" : \"attributeName\",    \"attributeKey\" : \"attributeKey\",    \"type\" : \"type\",    \"keyPosition\" : 0  } ],  \"createdBy\" : \"createdBy\",  \"cacheReferenceEntityName\" : \"cacheReferenceEntityName\",  \"description\" : \"description\",  \"cacheReferenceEntityKey\" : \"cacheReferenceEntityKey\",  \"status\" : { }}", CacheReferenceEntityDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CacheReferenceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Delete a Cache Reference Entity", nickname = "deleteCacheReferenceEntity", notes = "", tags={ "Cache Reference", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 400, message = "Invalid Context value"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "The specified resource was not found"),
        @ApiResponse(code = 500, message = "Internal server error"),
        @ApiResponse(code = 200, message = "Unexpected error") })
    @RequestMapping(value = "/projects/{projectKey}/configuration/cache-reference/{cacheReferenceEntityKey}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteCacheReferenceEntity(@ApiParam(value = "The project key",required=true) @PathVariable("projectKey") String projectKey,@ApiParam(value = "Cache Reference Entity Key",required=true) @PathVariable("cacheReferenceEntityKey") String cacheReferenceEntityKey) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CacheReferenceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get all cache reference entities", nickname = "getCacheReferenceEntities", notes = "", response = CacheReferenceEntityDTO.class, responseContainer = "List", tags={ "Cache Reference", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Cache Reference Entities retrieved", response = CacheReferenceEntityDTO.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid project key supplied"),
        @ApiResponse(code = 404, message = "Project not found") })
    @RequestMapping(value = "/projects/{projectKey}/configuration/cache-reference",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<CacheReferenceEntityDTO>> getCacheReferenceEntities(@ApiParam(value = "The project key",required=true) @PathVariable("projectKey") String projectKey) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {  \"createdAt\" : 6,  \"originProcess\" : \"originProcess\",  \"cacheReferenceAttributes\" : [ {    \"description\" : \"description\",    \"attributeName\" : \"attributeName\",    \"attributeKey\" : \"attributeKey\",    \"type\" : \"type\",    \"keyPosition\" : 0  }, {    \"description\" : \"description\",    \"attributeName\" : \"attributeName\",    \"attributeKey\" : \"attributeKey\",    \"type\" : \"type\",    \"keyPosition\" : 0  } ],  \"createdBy\" : \"createdBy\",  \"cacheReferenceEntityName\" : \"cacheReferenceEntityName\",  \"description\" : \"description\",  \"cacheReferenceEntityKey\" : \"cacheReferenceEntityKey\",  \"status\" : { }}, {  \"createdAt\" : 6,  \"originProcess\" : \"originProcess\",  \"cacheReferenceAttributes\" : [ {    \"description\" : \"description\",    \"attributeName\" : \"attributeName\",    \"attributeKey\" : \"attributeKey\",    \"type\" : \"type\",    \"keyPosition\" : 0  }, {    \"description\" : \"description\",    \"attributeName\" : \"attributeName\",    \"attributeKey\" : \"attributeKey\",    \"type\" : \"type\",    \"keyPosition\" : 0  } ],  \"createdBy\" : \"createdBy\",  \"cacheReferenceEntityName\" : \"cacheReferenceEntityName\",  \"description\" : \"description\",  \"cacheReferenceEntityKey\" : \"cacheReferenceEntityKey\",  \"status\" : { }} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CacheReferenceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get an Cache Reference Entity", nickname = "getCacheReferenceEntityByKey", notes = "", response = CacheReferenceEntityDTO.class, tags={ "Cache Reference", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Cache Reference Entity found", response = CacheReferenceEntityDTO.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Project or target not found") })
    @RequestMapping(value = "/projects/{projectKey}/configuration/cache-reference/{cacheReferenceEntityKey}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<CacheReferenceEntityDTO> getCacheReferenceEntityByKey(@ApiParam(value = "The project key",required=true) @PathVariable("projectKey") String projectKey,@ApiParam(value = "Cache Reference Entity Key",required=true) @PathVariable("cacheReferenceEntityKey") String cacheReferenceEntityKey) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"createdAt\" : 6,  \"originProcess\" : \"originProcess\",  \"cacheReferenceAttributes\" : [ {    \"description\" : \"description\",    \"attributeName\" : \"attributeName\",    \"attributeKey\" : \"attributeKey\",    \"type\" : \"type\",    \"keyPosition\" : 0  }, {    \"description\" : \"description\",    \"attributeName\" : \"attributeName\",    \"attributeKey\" : \"attributeKey\",    \"type\" : \"type\",    \"keyPosition\" : 0  } ],  \"createdBy\" : \"createdBy\",  \"cacheReferenceEntityName\" : \"cacheReferenceEntityName\",  \"description\" : \"description\",  \"cacheReferenceEntityKey\" : \"cacheReferenceEntityKey\",  \"status\" : { }}", CacheReferenceEntityDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CacheReferenceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Update a Cache Reference Entity", nickname = "updateCacheReferenceEntity", notes = "", response = CacheReferenceEntityDTO.class, tags={ "Cache Reference", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK Cache Reference Entity updated", response = CacheReferenceEntityDTO.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "The specified resource was not found"),
        @ApiResponse(code = 500, message = "Internal server error"),
        @ApiResponse(code = 200, message = "Unexpected error") })
    @RequestMapping(value = "/projects/{projectKey}/configuration/cache-reference/{cacheReferenceEntityKey}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<CacheReferenceEntityDTO> updateCacheReferenceEntity(@ApiParam(value = "The project key",required=true) @PathVariable("projectKey") String projectKey,@ApiParam(value = "Cache Reference Entity Key",required=true) @PathVariable("cacheReferenceEntityKey") String cacheReferenceEntityKey,@ApiParam(value = "Cache Reference Entity" ,required=true )  @Valid @RequestBody CacheReferenceEntityDTO cacheReferenceEntity) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"createdAt\" : 6,  \"originProcess\" : \"originProcess\",  \"cacheReferenceAttributes\" : [ {    \"description\" : \"description\",    \"attributeName\" : \"attributeName\",    \"attributeKey\" : \"attributeKey\",    \"type\" : \"type\",    \"keyPosition\" : 0  }, {    \"description\" : \"description\",    \"attributeName\" : \"attributeName\",    \"attributeKey\" : \"attributeKey\",    \"type\" : \"type\",    \"keyPosition\" : 0  } ],  \"createdBy\" : \"createdBy\",  \"cacheReferenceEntityName\" : \"cacheReferenceEntityName\",  \"description\" : \"description\",  \"cacheReferenceEntityKey\" : \"cacheReferenceEntityKey\",  \"status\" : { }}", CacheReferenceEntityDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CacheReferenceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
