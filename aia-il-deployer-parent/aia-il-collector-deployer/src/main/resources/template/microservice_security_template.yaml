apiVersion: app.amdocs.com/v1beta1
kind: Microservice
metadata:
  name: $SERVICE_NAME
  labels:
    app.kubernetes.io/managed-by: Helm
    service-type: runtime
    monitored: prometheus
  annotations:
    meta.helm.sh/release-name: $SERVICE_NAME-$NAMESPACE
    meta.helm.sh/release-namespace: $NAMESPACE
    prometheus.io/scrape: "true"
    prometheus.io/probe: "true"
    prometheus.io/port: "8081"
    prometheus.io/path: "/actuator/prometheus"
spec:
  version: master-TRUNK-SNAPSHOT
  domain: aia
  component: $SERVICE_NAME
  partOf: aia
  instance: $SERVICE_NAME-$NAMESPACE
  serviceName: $SERVICE_NAME
  minReplicas: 1
  maxReplicas: 2
  identityManagement:
    roles:
      - $SERVICE_NAME:
          description: $SERVICE_NAME
          roleType: TR
    serviceRoles:
      - $SERVICE_NAME

  resources:
    requests:
      memory: 800Mi
      cpu: 800m
    limits:
      memory: 800Mi
      cpu: 800m

  javaOptions:
    initialHeapSize: 512M
    maxHeapSize: 512M
    additionalOpts: -Dlogging.level.com.amdocs.msnext=ERROR
      -Dcom.amdocs.msnext.securityjwt.jwt.validation.type=FAKE

  containerName: $SERVICE_NAME

  template:
    metadata:
      labels:
        app: $SERVICE_NAME
        monitored: prometheus
        service-type: runtime
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/probe: "true"
        prometheus.io/port: "8081"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxSurge: 1
          maxUnavailable: 0
      imagePullSecrets:
        - name: ilnexusdmz02-8090-pull-secret
      initContainers:
        - name: configuration-container
          image: "$INIT_CONTAINER_IMAGE"
          imagePullPolicy: Always
          volumeMounts:
            - mountPath: /opt/amdocs/aia
              name: configuration-volume
      containers:
        - name: $SERVICE_NAME
          # The Docker image to use
          image: "$IMAGE_REPOSITORY/$DOCKER_IMAGE_NAME:$TAG_NAME"
          imagePullPolicy: Always
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8081
            initialDelaySeconds: 30
            timeoutSeconds: 5
          env:
            - name: GENERIC_COLLECTOR_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: GENERIC_COLLECTOR_REPO_ELEMENTS_LOCAL_PATH
              value: "/opt/amdocs/aia/config"
            - name: KAFKA_SOURCE_TRUSTSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: $KAFKA_SECRET
                  key: key-password.txt
            - name: KAFKA_TRUSTSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: $KAFKA_SECRET
                  key: key-password.txt
            - name: MSNEXT_CONF_SOURCE_APP1
              value: /deployments/config/applications/$SERVICE_NAME

          # Mount the configuration as volume in the above location
          volumeMounts:
            - mountPath: /deployments/config/applications/$SERVICE_NAME
              name: $SERVICE_NAME-configmap
            - mountPath: /opt/amdocs/aia
              name: configuration-volume
            - mountPath: /opt/aia/il/$SERVICE_NAME
              name: $SERVICE_NAME-volume
              # just an example

      dnsPolicy: ClusterFirst
      restartPolicy: Always
      # define the configmap that should be used with this deployment
      # and the items that are expected to be mounted by that config map
      volumes:
        - name: $SERVICE_NAME-volume
          persistentVolumeClaim:
            claimName: $SERVICE_NAME-pvc
        - configMap:
            defaultMode: 420
            items:
              - key: $APPLICATION_PROPERTY_FILE
                path: $APPLICATION_PROPERTY_FILE
            name: $SERVICE_NAME-configmap
          name: $SERVICE_NAME-configmap
        - name: configuration-volume
          emptyDir: {}
